[{"title":"Retrofit使用","date":"2017-01-10T08:25:52.000Z","path":"2017/01/10/Retrofit使用/","text":"&#8195;&#8195;上篇我们介绍了OkHttp的使用，OkHttp虽说是网络请求，但和velley、nohttp等不大相同，它属于底层的东西，是没有经过封装的。今天我们讨论的retrofit就是对okhttp进行了封装，是一个非常棒的网络请求框架。&#8195;&#8195;retrofit是主要是通过注解的形式来写请求接口，并且支持Rx，配合使用有奇效。 如何使用首先当然是依赖12345compile 'com.squareup.retrofit2:retrofit:2.1.0'compile 'com.squareup.retrofit2:converter-gson:2.1.0'//compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'//compile 'io.reactivex:rxandroid:1.2.1'//compile 'io.reactivex:rxjava:1.2.3' *注释部分是配合rx使用。然后java部分我们先写个接口类用于网络请求123456789101112131415161718192021222324public interface ApiService &#123; /** * 每日一Gank **/ @GET(\"day/&#123;year&#125;/&#123;month&#125;/&#123;day&#125;\") Call/*Observable*/&lt;GankData&gt; getDayData(@Path(\"year\") int year,@Path(\"month\") int month, @Path(\"day\") int day); /** * 获取IP信息 **/ @FormUrlEncoded @POST(\"service/getIpInfo.php\") Call/*Observable*/&lt;IpInfo&gt; getIpInfo(@Field(\"ip\") String ip); /** * 上传头像 **/ @Multipart @POST(\"uptUserHeadImg\") Call/*Observable*/&lt;UserBean&gt; uploadHead(@Part MultipartBody.Part photo, @Part(\"uid\") RequestBody userId); /** * 下载图片 */ @GET Call/*Observable*/&lt;ResponseBody&gt; downloadPicFromNet(@Url String fileUrl);&#125; *注释部分是配合Rx使用这里我们介绍一下retrofit的注解 get请求 @GET 申明get请求方式，括号里面是请求路径。 @Query 请求参数对应的键值，括号内为key，参数为value。 @QueryMap 如果Query参数比较多，那么可以通过@QueryMap方式将所有的参数集成在一个Map。 @Path 会把参数填充到路径上，如上面的@Path(&quot;year&quot;) @Path(&quot;month&quot;) @Path(&quot;day&quot;) 会填充@GET(&quot;day/{year}/{month}/{day}&quot;) 中的year、month、day。@Path可用于任何请求方式。 @Url 不使用baseUrl。 post请求 @POST 申明post请求方式，括号里面是请求路径。 @FormUrlEncoded 自动将请求参数的类型调整为application/x-www-form-urlencoded，FormUrlEncoded不能用于Get请求。 @Field 请求参数对应的键值。 @FieldMap 如果Field参数比较多，那么可以通过@FieldMap 方式将所有的参数集成在一个Map。 @Body 请求参数有多个，那么统一封装到类中应该会更好，这样维护起来会非常方便。 上传文件 @Multipart 申明为上传文件方式。 @Part 参数列表 MultipartBody.Part 为文件类型，RequestBody 为一般参数。 @PartMap 如果Part参数比较多，那么可以通过@PartMap 方式将所有的参数集成在一个Map。@PartMap Map&lt;String, RequestBody&gt; params 可以是多个文件，也可是文件与参数混合。 接口类写好后，我们要写个单例模式的网络请求类12345678910111213141516171819202122232425262728293031323334353637public class Api &#123; public static final String BASE_URL = \"http://gank.io/api/\"; public final static MediaType TYPE_IMAGE = MediaType.parse(\"image/*\"); public static final int DEFAULT_TIMEOUT = 30; public Retrofit retrofit; public ApiService service; //构造方法私有 private Api() &#123; OkHttpClient okHttpClient = new OkHttpClient.Builder() .readTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS) .connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS) .build(); Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").serializeNulls().create(); retrofit = new Retrofit.Builder() .client(okHttpClient) .addConverterFactory(GsonConverterFactory.create(gson)) //.addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .baseUrl(BASE_URL) .build(); service = retrofit.create(ApiService.class); &#125; //在访问HttpMethods时创建单例 private static class SingletonHolder &#123; private static final Api INSTANCE = new Api(); &#125; //获取单例 public static Api getInstance() &#123; return SingletonHolder.INSTANCE; &#125; 到这里基本上完成一大半，下面我们开始在Activity、fragment等中调用。12345678910111213141516171819202122232425262728293031323334353637383940414243Calendar calender = Calendar.getInstance();calender.setTime(date); //Rx使用方式Api.getInstance().service.getDayData(calender.get(Calendar.YEAR), calender.get(Calendar.MONTH) + 1, calender.get(Calendar.DAY_OF_MONTH)) .subscribeOn(Schedulers.io()) .map(new Func1&lt;GankData, GankData.ResultsBean&gt;() &#123; @Override public GankData.ResultsBean call(GankData gankData) &#123; return gankData.getResults(); &#125; &#125;) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Subscriber&lt;GankData.ResultsBean&gt;() &#123; @Override public void onCompleted() &#123; Log.v(\"success:\", \"onCompleted\"); &#125; @Override public void onError(Throwable e) &#123; Log.v(\"failure:\", \"onError\"); &#125; @Override public void onNext(GankData.ResultsBean resultsBean) &#123; &#125; &#125;); //call使用方式Api.getInstance().service.getDayData(calender.get(Calendar.YEAR), calender.get(Calendar.MONTH) + 1, calender.get(Calendar.DAY_OF_MONTH)) .enqueue(new Callback&lt;GankData&gt;() &#123; @Override public void onResponse(Call&lt;GankData&gt; call,Response&lt;GankData&gt; response) &#123; &#125; @Override public void onFailure(Call&lt;GankData&gt; call, Throwable t) &#123; &#125;&#125;); 其他的接口也是类似的操作。 总结&#8195;&#8195; retrofit使用起来还是蛮方便的，其他还有header、日志、拦截器等的内容没有介绍，考虑到一般情况下是不需要对这些进行操作的 。使用retrofit后台必须遵循restful原则，具体概念可上网了解。例子中使用到了Rx等相关的知识，了解java后端的应该对链式操作有所了解，需要学习的小伙伴可参考抛物线的给 Android 开发者的 RxJava 详解 ，这篇文章对Rx进行了详细的解读。目前Rx 2.0的版本也已发布，相对1.0有些许改动。","tags":[{"name":"网络请求","slug":"网络请求","permalink":"//dongqing123.cn/tags/网络请求/"},{"name":"Android","slug":"Android","permalink":"//dongqing123.cn/tags/Android/"},{"name":"retrofit","slug":"retrofit","permalink":"//dongqing123.cn/tags/retrofit/"}]},{"title":"React Native 配置","date":"2017-01-04T03:22:26.000Z","path":"2017/01/04/React-Native-配置/","text":"&#8195;&#8195;近年来随着移动互联网的发展，移动可以说在飞速的进步，加上各种培训机构，市场上涌入了大堆大堆的新人加入到手机App的行业，从而形成了饱和的状态。从2016年初开始，移动开发出现了各种低潮，从找工作这一方面来看，明显难度高了好多，公司都不愿意招手机app的人员，反而愿意招收后端开发。明明年底是跳槽的一次进修，现在都开始观望了，不敢轻易，当然实力大牛这些对他们来说影响不大。不过最近出现了许多替代原生开发的工具，从早期的phoneGap,到比较火的H5，以及2015年出现RN，听说微信的“小程序”也想分一杯羹。各种原生已死的评论到处都是，作为手机开发人员当然知道这些目前还不太可能，但是也不能坐吃山空，墨守成规。对于这些新技术也是要了解一下的。&#8195;&#8195;React Native 目前也有一年多的历史了，应用商店也有许多基于RN的App，应该算是比较成熟了，但官方依然还是0.x.x的版本，正式版不知何时发布。 RN环境配置在RN中文网上有详细的搭建开发环境，一般按着步骤走是可行的，若安装较慢可以使用科学上网或者换淘宝的镜像。 ##搭建RN项目环境搭建完成后，是时候开始学习RN了，我们先从新建项目开始，官方是通过123react-native init AwesomeProjectcd AwesomeProjectreact-native run-android 命令来实现项目的新建与运行（部分手机会crash需要到权限管理中心开启悬浮窗权限），也可参考江清清的博客React Native专题中的两篇React Native For Android环境配置以及第一个实例、React Native移植原生Android项目-已更新版本-New。如果你已新建项目并且Android没有修改代码可以通过以下操作12adb reverse tcp:8081 tcp:8081react-native start 上面命令来启动服务，手机打开RN项目通过重新加载JS就可以了（摇一摇或者按menu菜单键选择Reload）。 编辑JSRN相比原生最方便的就是修改代码（不涉及原生代码）不需要重新安装，只需要重新加载JS就可以了，非常的方便。而且大部分JS代码Android与iOS是可以共用的，可以说是实现了一套代码两个版本。编辑JS的IDE可供选择的有很多，atom、webstorm、sublime text3等等，可根据个人习惯选择。 最后本篇主要说的是RN的环境配置与搭建RN项目，平时在业余时间可以用来练练手，学习学习。但是用于商业项目还是需要相当谨慎的，也许会遇到很多很多的填不完的坑。","tags":[{"name":"Android","slug":"Android","permalink":"//dongqing123.cn/tags/Android/"},{"name":"RN","slug":"RN","permalink":"//dongqing123.cn/tags/RN/"}]},{"title":"2016年总结","date":"2017-01-04T03:21:33.000Z","path":"2017/01/04/2016年总结/","text":"&#8195;&#8195;时间总是过的飞快，转眼之间2016年已经没剩几天了，想想自己都是26岁的人了，离自己的梦想也渐行渐远。&#8195;&#8195;回顾这一整年，发现自己干的琐事确实蛮多的，但坚持的事总是没有，想想自己都快毕业3年了，还是碌碌无为呀。反而看了许多人写的年终总结，发现自己与他们的差距真的是非常的大，人家一年做了好多好多的实事，而我一年都不知道干了什么。&#8195;&#8195;说实话我是不喜欢写总结来着，这算是我第一次。想想自己都出来3年了，考研的现在也该毕业了，自己的年龄也是越来越大，精力也不想以前那么充沛了，实在不想再浑浑噩噩的过日子。&#8195;&#8195;废话说了这么多，看看我16年都干了些什么。&#8195;&#8195;想了想实在不知道干么了。。。&#8195;&#8195;3月份当时点窝业务还在，还在维护点窝商城与电视TV，还有就是我的手下离职了，我成了孤家寡人，之后就开始做电子券与供销通的业务。&#8195;&#8195;说起来就觉得公司比较坑，app做了一版又一版就是没有投入使用，给我的感觉就是我做的app一个都没上线。之后我就开始投入到万千同性交友网站github的怀抱，写demo。&#8195;&#8195;好了基本上就这些，然后就是学习。&#8195;&#8195;学习drag2、mvp 、rx、okhttp、retrofit等等开源框架，订阅与关注了许多大牛，了解RN、热修复等等相关的知识，写写演示Demo。&#8195;&#8195;到12月份的时候，我终于打算写个人app上线应用商店。我开始基于gank.io写我的个人app，注册了三大平台的账号，前前后后花了大概3周的时间终于上线了，但也仅仅是上线了。&#8195;&#8195;写完我是真发现没做什么实事呢。&#8195;&#8195;2017年真是希望自己有所改变，不管是技术还是人际。","tags":[{"name":"总结","slug":"总结","permalink":"//dongqing123.cn/tags/总结/"},{"name":"随笔","slug":"随笔","permalink":"//dongqing123.cn/tags/随笔/"}]},{"title":"OkHttp的使用","date":"2017-01-04T03:20:51.000Z","path":"2017/01/04/OkHttp的使用/","text":"网络请求框架我一直都使用httpclient，后来改成了xutils，但是去年开始自从Android6.0去掉了httpclient的支持，想要使用还要在build.gradle添加useLibrary &#39;org.apache.http.legacy&#39;，加上google的推广，Okhttp变得非常火了起来，于是自己也修改自己的网络框架。我使用时OkHttp已经出现3.0的版本了，与2.0的版本还是有一些差别的 get基本上没有什么区别 2.0123456OkHttpClient client = new OkHttpClient();client.setConnectTimeout(15,TimeUnit.SECONDS);client.setWriteTimeout(20,TimeUnit.SECONDS); client.setReadTimeout(20,TimeUnit.SECONDS);Request request = new Request.Builder().url(url).build();Response response = client.newCall(request).execute(); 3.0123456OkHttpClient client = new OkHttpClient();client.newBuilder().connectTitmeout(15,TimeUnit.SECONDS)client.newBuilder().readTimeout(15,TimeUnit.SECONDS)client.newBuilder().wirteTimeout(15,TimeUnit.SECONDS)Request request = new Request.Builder().url(url).build();Response response = client.newCall(request).execute(); post取消了FormEncodingBuilder使用FormBody 2.01234OkHttpClient client = new OkHttpClient();RequestBody requestBody = new FormEncodingBuilder() .add(\"\",\"\").add(\"\",\"\").build();Request request = new Request.Builder().url(url).post(requestBody).build();Response response = client.newCall(request).execute(); 3.01234OkHttpClient client = new OkHttpClient();RequestBody requestBody = new FormBody.Builder().add(\"\",\"\").add(\"\",\"\").build();Request request = new Request.Builder().url(url).post(requestBody).build();Response response = client.newCall(request).execute(); 上传文件MultipartBuilder改为MultipartBody 2.0123456789OkHttpClient client = new OkHttpClient();MultipartBuilder multipartEntity = new MultipartBuilder().type(MultipartBuilder.FORM); File file = new File(tmepName);RequestBody fileBody = RequestBody.create(MediaType.parse(\"image/*\"), file);multipartEntity.addFormDataPart(key,file.getName(), fileBody);multipartEntity.addFormDataPart(key, value);RequestBody requestBody = multipartEntity.build();Request request = new Request.Builder().url(url).post(requestBody).build();Response response = client.newCall(request).execute(); 3.0123456789OkHttpClient client = new OkHttpClient();MultipartBody.Builder multipartEntity = new MultipartBody.Builder();File file = new File(tmepName);RequestBody fileBody = RequestBody.create(MediaType.parse(\"image/*\"), file);multipartEntity.addFormDataPart(key,file.getName(), fileBody);multipartEntity.addFormDataPart(key, value);RequestBody requestBody = multipartEntity.build();Request request = new Request.Builder().url(url).post(requestBody).build();Response response = client.newCall(request).execute(); cookie使用cookieJar替代cookieHandler持久化文件 2.01client.setCookieHandler(new CokieManager(new PersistentCookieStore(context), CookiePolicy.ACCEPT_ALL)); 3.01client.newBuilder().cookieJar(new CookiesManager()); 以上就是OkHttp的简单使用以及2.0与3.0的差异，下一篇我们讲解retrofit。","tags":[{"name":"网络请求","slug":"网络请求","permalink":"//dongqing123.cn/tags/网络请求/"},{"name":"okHttp","slug":"okHttp","permalink":"//dongqing123.cn/tags/okHttp/"},{"name":"Android","slug":"Android","permalink":"//dongqing123.cn/tags/Android/"}]},{"title":"Hello World","date":"2016-12-28T06:16:40.000Z","path":"2016/12/28/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]