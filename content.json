[{"title":"OkHttp的使用","date":"2017-01-04T00:35:25.000Z","path":"2017/01/04/OkHttp的使用/","text":"#OkHttp的使用 @(技术博客–RN) 网络请求框架我一直都使用httpclient，后来改成了xutils，但是去年开始自从Android6.0去掉了httpclient的支持，想要使用还要在build.gradle添加useLibrary &#39;org.apache.http.legacy&#39;，加上google的推广，Okhttp变得非常火了起来，于是自己也修改自己的网络框架。我使用时OkHttp已经出现3.0的版本了，与2.0的版本还是有一些差别的 ##get基本上没有什么区别 ####2.0OkHttpClient client = new OkHttpClient(); client.setConnectTimeout(15,TimeUnit.SECONDS); client.setWriteTimeout(20,TimeUnit.SECONDS); client.setReadTimeout(20,TimeUnit.SECONDS); Request request = new Request.Builder().url(url).build(); Response response = client.newCall(request).execute(); ####3.0OkHttpClient client = new OkHttpClient(); client.newBuilder().connectTitmeout(15,TimeUnit.SECONDS) client.newBuilder().readTimeout(15,TimeUnit.SECONDS) client.newBuilder().wirteTimeout(15,TimeUnit.SECONDS) Request request = new Request.Builder().url(url).build(); Response response = client.newCall(request).execute(); ##post取消了FormEncodingBuilder使用FormBody ####2.0OkHttpClient client = new OkHttpClient(); RequestBody requestBody = new FormEncodingBuilder() .add(&quot;&quot;,&quot;&quot;).add(&quot;&quot;,&quot;&quot;).build(); Request request = new Request.Builder().url(url).post(requestBody).build(); Response response = client.newCall(request).execute(); ####3.0OkHttpClient client = new OkHttpClient(); RequestBody requestBody = new FormBody.Builder().add(&quot;&quot;,&quot;&quot;).add(&quot;&quot;,&quot;&quot;).build(); Request request = new Request.Builder().url(url).post(requestBody).build(); Response response = client.newCall(request).execute(); ##上传文件MultipartBuilder改为MultipartBody ####2.0OkHttpClient client = new OkHttpClient(); MultipartBuilder multipartEntity = new MultipartBuilder().type(MultipartBuilder.FORM); File file = new File(tmepName); RequestBody fileBody = RequestBody.create(MediaType.parse(&quot;image/*&quot;), file); multipartEntity.addFormDataPart(key,file.getName(), fileBody); multipartEntity.addFormDataPart(key, value); RequestBody requestBody = multipartEntity.build(); Request request = new Request.Builder().url(url).post(requestBody).build(); Response response = client.newCall(request).execute(); ####3.0OkHttpClient client = new OkHttpClient(); MultipartBody.Builder multipartEntity = new MultipartBody.Builder(); File file = new File(tmepName); RequestBody fileBody = RequestBody.create(MediaType.parse(&quot;image/*&quot;), file); multipartEntity.addFormDataPart(key,file.getName(), fileBody); multipartEntity.addFormDataPart(key, value); RequestBody requestBody = multipartEntity.build(); Request request = new Request.Builder().url(url).post(requestBody).build(); Response response = client.newCall(request).execute(); ##cookie使用cookieJar替代cookieHandler持久化文件 ####2.0client.setCookieHandler(new CookieManager(new PersistentCookieStore(context), CookiePolicy.ACCEPT_ALL)); ####3.0client.newBuilder().cookieJar(new CookiesManager()); 以上就是OkHttp的简单使用以及2.0与3.0的差异，下一篇我们讲解retrofit。","tags":[]},{"title":"Hello World","date":"2016-12-28T06:16:40.000Z","path":"2016/12/28/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]